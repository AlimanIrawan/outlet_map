====================================
印尼雅加达冰柜配送地图展示系统
Netlify 前端部署配置指南 v3.0
====================================

🎯 目标: 将React前端应用部署到Netlify

📋 部署步骤:

【第一步: 登录Netlify】
1. 访问: https://www.netlify.com/
2. 使用GitHub账号登录
3. 授权Netlify访问你的GitHub仓库

🔐 私有仓库自动更新配置（重要！）:
如果你的GitHub仓库是私有的，必须正确配置权限才能实现自动更新:

💡 注意：免费账户和付费账户的界面可能略有不同，请根据实际情况选择对应方法

🆓 免费账户推荐方法（最简单）:
1. 直接创建新站点时重新授权
2. 点击"Add new site" → "Import an existing project"
3. 选择"GitHub"，系统会要求重新授权
4. 在GitHub授权页面确保选择:
   - "All repositories" 或包含你的私有仓库
   - 勾选所有必要的权限
5. 完成授权后选择你的仓库

方法1: 重新授权Netlify访问GitHub（其他选项）

选项1a: 通过站点设置重新连接
1. 登录Netlify Dashboard
2. 进入你的站点 → Site settings → Build & deploy
3. 在"Continuous deployment"部分，点击"Link to repository"
4. 重新选择GitHub并授权访问私有仓库
5. 确保授权包含所有必要权限

选项1b: 如果有Team settings（付费账户）
1. 登录Netlify Dashboard
2. 进入 Team settings → Connected accounts
3. 找到GitHub，点击"Configure"
4. 在弹出的GitHub授权页面中，确保勾选:
   - "All repositories" 或选择特定的私有仓库
   - "Read and write access to code"
   - "Read access to metadata"
5. 点击"Save"完成授权

选项1c: 删除并重新创建站点连接
1. 在站点设置中断开当前GitHub连接
2. 重新创建站点并连接到GitHub仓库
3. 在授权过程中确保选择正确的权限范围

方法2: 使用GitHub Personal Access Token
1. 在GitHub中: Settings → Developer settings → Personal access tokens → Tokens (classic)
2. 点击"Generate new token (classic)"
3. 设置token名称: "Netlify Auto Deploy"
4. 选择权限范围:
   - ✅ repo (完整仓库访问权限)
   - ✅ admin:repo_hook (webhook权限)
5. 点击"Generate token"并复制token
6. 在Netlify部署时:
   - 选择"Deploy with Git"
   - 输入GitHub用户名和刚才生成的token作为密码

方法3: 检查GitHub App权限
1. 在GitHub中: Settings → Applications → Authorized GitHub Apps
2. 找到"Netlify"应用，点击"Configure"
3. 确保"Repository access"设置为:
   - "All repositories" 或
   - "Selected repositories"并包含你的项目仓库
4. 保存设置

⚠️ 权限配置成功后的验证:
- 在Netlify站点设置中应该能看到"Connected to GitHub"
- 推送代码到GitHub后，Netlify会自动触发构建
- 可以在Netlify的"Deploys"页面看到自动构建记录

【第二步: 创建新站点】

方案A: Git集成部署（推荐）
1. 点击"Add new site" → "Import an existing project"
2. 选择"GitHub"
3. 选择仓库: "AlimanIrawan/jakarta-freezer-delivery-map"
4. 配置构建设置:
   - Branch to deploy: main
   - Base directory: (留空，使用根目录)
   - Build command: npm run build
   - Publish directory: build

方案B: 手动部署（适用于私有仓库权限问题）
1. 点击"Add new site" → "Deploy manually"
2. 将本地构建好的build文件夹拖拽到部署区域
3. 或者压缩build文件夹为zip，然后上传
4. 注意：手动部署不支持自动更新，每次代码更改需重新上传

💡 推荐使用方案A，如果遇到私有仓库权限问题，先尝试上述私有仓库配置，实在不行再使用方案B

【第三步: 配置环境变量】
在"Site settings" → "Environment variables"添加:

REACT_APP_API_URL=https://你的Render后端URL
REACT_APP_SYNC_ENDPOINT=https://你的Render后端URL/sync
REACT_APP_MAP_CENTER_LAT=-6.2
REACT_APP_MAP_CENTER_LNG=106.8
REACT_APP_MAP_ZOOM=10

【第四步: 配置重定向规则】
创建 public/_redirects 文件:

# SPA路由重定向
/*    /index.html   200

# API代理（可选，如果需要）
/api/*  https://你的Render后端URL/api/:splat  200

【第五步: 部署站点】
1. 点击"Deploy site"
2. 等待构建完成（约3-5分钟）
3. 记录分配的域名: https://随机名称.netlify.app
4. 可以在"Site settings" → "General"中自定义域名

【第六步: 更新后端CORS配置】
1. 回到Render后端服务
2. 更新环境变量 CORS_ORIGIN:
   CORS_ORIGIN=https://你的Netlify域名.netlify.app
3. 重新部署后端服务

【第七步: 验证部署】
访问你的Netlify域名验证:
- 地图正常加载
- 数据展示正常
- 手动同步功能正常
- 统计面板显示正确

🔧 Netlify配置文件:
可选创建 netlify.toml:

[build]
  command = "npm run build"
  publish = "build"

[build.environment]
  NODE_VERSION = "18"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[[headers]]
  for = "/static/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

🚀 自动部署配置详解:

✅ 自动更新工作原理:
1. 当你推送代码到GitHub的main分支时
2. GitHub会发送webhook通知给Netlify
3. Netlify自动拉取最新代码并执行构建
4. 构建成功后自动部署到生产环境

🔧 确保自动更新正常工作:
1. 检查Netlify站点设置:
   - Site settings → Build & deploy → Continuous deployment
   - 确保"Branch to deploy"设置为"main"
   - 确保"Auto publishing"开关是开启状态

2. 验证GitHub连接状态:
   - 在Netlify Dashboard中应显示"Connected to GitHub"
   - 如果显示"Disconnected"，需要重新连接

3. 测试自动部署:
   - 修改项目中的任意文件（如README.md）
   - 提交并推送到GitHub: git add . && git commit -m "test auto deploy" && git push
   - 在Netlify的"Deploys"页面观察是否自动触发新的构建

📧 部署通知:
- 构建成功/失败会收到邮件通知
- 可以在Site settings → Notifications中配置通知设置
- 支持Slack、Discord等第三方通知

🔄 版本管理:
- 每次部署都会保留历史版本
- 可以在"Deploys"页面回滚到之前的版本
- 支持预览分支部署（非main分支的预览）

💰 费用说明:
- 免费计划: 100GB带宽/月，300分钟构建时间
- 付费计划: $19/月起，更多功能和带宽

🔧 前端配置更新:
确保前端代码中的API端点正确:

// src/App.tsx 中的 handleManualUpdate 函数
const response = await fetch(`${process.env.REACT_APP_API_URL}/sync`, {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
});

🚨 注意事项:
- 确保环境变量以REACT_APP_开头
- 构建后的环境变量会被嵌入到静态文件中
- 敏感信息不要放在前端环境变量中
- 确保API URL使用HTTPS

📊 监控和分析:
- Netlify Analytics可以查看访问统计
- Deploy logs显示构建详情
- Function logs（如果使用）
- 可以集成Google Analytics

🔗 自定义域名（可选）:
1. 在"Site settings" → "Domain management"
2. 添加自定义域名
3. 配置DNS记录指向Netlify
4. 启用HTTPS（自动）

🚨 自动更新故障排除:

问题1: 推送代码后Netlify没有自动构建
解决方案:
- 检查GitHub仓库的Webhooks设置（Settings → Webhooks）
- 确保有指向Netlify的webhook（通常以netlify.com结尾）
- 如果没有，在Netlify中重新连接GitHub仓库
- 检查分支名称是否正确（main vs master）

问题2: 构建失败
解决方案:
- 查看Netlify的Deploy logs了解具体错误
- 常见问题：
  * 环境变量缺失 → 在Site settings中添加
  * Node.js版本不匹配 → 在netlify.toml中指定版本
  * 依赖安装失败 → 检查package.json和package-lock.json

问题3: 私有仓库权限问题
解决方案:
- 重新授权Netlify访问GitHub（参考上面的权限配置）
- 使用Personal Access Token
- 确保token有足够的权限（repo + admin:repo_hook）

问题4: 部署成功但网站显示旧版本
解决方案:
- 清除浏览器缓存
- 检查Netlify的缓存设置
- 在Netlify中手动触发"Clear cache and deploy site"

💡 最佳实践:
- 使用Git集成部署（方案A）而不是手动部署
- 定期检查部署状态和日志
- 为重要更新创建分支进行测试
- 配置部署通知以及时了解构建状态

完成后系统就全部部署完成了！
现在你的Netlify站点将自动从GitHub读取数据并实现自动更新！